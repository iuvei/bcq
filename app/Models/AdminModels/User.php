<?php

namespace App\Models\AdminModels;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Builder;

class User extends Model
{
    protected $table = 'users';
    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $guarded = [];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    public function author(){

        return $this->hasOne('App\Models\AdminModels\Author','uid','id');

    }
    public function mail_send(){

        return $this->hasMany('App\Models\AdminModels\MailSend','to','id');

    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::addGlobalScope("avaiable",function (Builder $query){
            $query->whereIn('status',[0,1]);
        });
    }

    static function getUser($skip,$limit,$flag,$opt,$orOpt,$betweenOpt){
        if (empty($limit)){
            return [];
        }
        if (!isset($skip)){
            $skip = 0;
        }
        $query = User::orderBy('id', 'desc');
        if (!empty($opt)){
            foreach ($opt as $k => $v){
                if(is_array($v) && $v[1]){
                    $query = $query->where($k,$v[0],$v[1]);
                }elseif(!is_array($v) && $v){
                    $query = $query->where($k,$v);
                }
            }
        }
        if (!empty($betweenOpt)){
            foreach ($betweenOpt as $k => $v){
                $query = $query->whereBetween($k,$v);
            }
        }
        if (!empty($orOpt)){
            $query = $query->where(function ($query) use($orOpt){
                foreach ($orOpt as $k => $v){
                    if(is_array($v) && $v[1]){
                        $query->orWhere($k,$v[0],$v[1]);
                    }elseif(!is_array($v) && $v){
                        $query->orWhere($k,$v);
                    }
                }
            });
        }
        if ($flag){
            $obj = $query->get();
        }else{
            $obj = $query->skip($skip)->limit($limit)->get();
        }
        return $obj;
    }

    static function getUserCount($statusSign,$status){

        $count = User::where('status',$statusSign,$status)->count();

        return $count;
    }

    static function getNotAuthor($skip,$limit,$flag,$orOpt){
        $query = User::orderBy('id', 'desc');
        if (!empty($orOpt)){
            $query = $query->where(function ($query) use($orOpt){
                foreach ($orOpt as $k => $v){
                    if(is_array($v) && $v[1]){
                        $query->orWhere($k,$v[0],$v[1]);
                    }elseif(!is_array($v) && $v){
                        $query->orWhere($k,$v);
                    }
                }
            });
        }

        $query = $query->whereDoesntHave('author', function ($query) {
            $query->whereIn('status',[1,0]);
        });

        if ($flag){
            $obj = $query->get();
        }else{
            $obj = $query->skip($skip)->limit($limit)->get();
        }

        return $obj;
    }


    static function getNotAuthorCount($orOpt){
        $query = User::orderBy('id', 'desc');
        if (!empty($orOpt)){
            $query = $query->where(function ($query) use($orOpt){
                foreach ($orOpt as $k => $v){
                    if(is_array($v) && $v[1]){
                        $query->orWhere($k,$v[0],$v[1]);
                    }elseif(!is_array($v) && $v){
                        $query->orWhere($k,$v);
                    }
                }
            });
        }
        $count = $query->whereDoesntHave('author', function ($query) {
            $query->whereIn('status',[1,0]);
        })->count();

        return $count;
    }

    static function getUserAuthor(){
        $query = User::whereHas('author', function ($query) {
            $query->where('is_admin', 1);
        });

        $obj = $query->orderBy('id', 'desc')->get()->load('author');

        return $obj;
    }

    static function getNotMail($skip,$limit,$flag,$orOpt=array(),$betweenOpt=array(),$mid){
        if (empty($limit)){
            return [];
        }
        if (!isset($skip)){
            $skip = 0;
        }
        $query = User::whereDoesntHave('mail_send', function ($query) use($mid) {
            $query->where('mid', $mid);
        });
        if (!empty($betweenOpt)){
            foreach ($betweenOpt as $k => $v){
                $query = $query->whereBetween($k,$v);
            }
        }
        if (!empty($orOpt)){
            $query = $query->where(function ($query) use($orOpt){
                foreach ($orOpt as $k => $v){
                    if(is_array($v) && $v[1]){
                        $query->orWhere($k,$v[0],$v[1]);
                    }elseif(!is_array($v) && $v){
                        $query->orWhere($k,$v);
                    }
                }
            });
        }

        if ($flag){
            $obj = $query->get();
        }else{
            $obj = $query->skip($skip)->limit($limit)->get();
        }
        return $obj;

    }

    static function getNotMailCount($mid){

        $count = User::whereDoesntHave('mail_send', function ($query) use($mid) {
            $query->where('mid', $mid);
        })->count();

        return $count;
    }

}